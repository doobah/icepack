<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Icepack</name>
    </assembly>
    <members>
        <member name="T:Icepack.IcepackException">
            <summary> An exception thrown by the serializer. </summary>
        </member>
        <member name="M:Icepack.IcepackException.#ctor(System.String,System.Exception)">
            <summary> Create a new <see cref="T:Icepack.IcepackException"/>. </summary>
            <param name="message"> The details of the exception. </param>
            <param name="innerException"> The exception that caused this one. </param>
        </member>
        <member name="T:Icepack.IgnoreFieldAttribute">
            <summary> Marks a field to be ignored during serialization/deserialization. </summary>
        </member>
        <member name="T:Icepack.DeserializationContext">
            <summary> Stores state for the current deserialization operation. </summary>
        </member>
        <member name="P:Icepack.DeserializationContext.Types">
            <summary> Metadata for types declared in the serialized data, indexed by type ID. </summary>
        </member>
        <member name="P:Icepack.DeserializationContext.Objects">
            <summary> Metadata for objects declared in the serialized data, indexed by object ID. </summary>
        </member>
        <member name="M:Icepack.DeserializationContext.#ctor">
            <summary> Creates a new deserialization context. </summary>
        </member>
        <member name="T:Icepack.DeserializationDelegateFactory">
            <summary> Returns delegates for deserializing types and fields. </summary>
        </member>
        <member name="M:Icepack.DeserializationDelegateFactory.GetReferenceTypeOperation(Icepack.TypeCategory)">
            <summary> Returns a delegate which is used to deserialize instances of the given type category. </summary>
            <param name="category"> The type category. </param>
            <returns> The deserialization delegate. </returns>
        </member>
        <member name="M:Icepack.DeserializationDelegateFactory.GetFieldOperation(System.Type)">
            <summary> Returns the delegate used to deserialize fields of the given type. </summary>
            <param name="type"> The field's declaring type. </param>
            <returns> The deserialization delegate. </returns>
        </member>
        <member name="M:Icepack.DeserializationDelegateFactory.GetImmutableOperation(System.Type)">
            <summary> Returns the delegate used to deserialize immutable types. </summary>
            <param name="type"> The type. </param>
            <returns> The deserialization delegate. </returns>
        </member>
        <member name="T:Icepack.FieldMetadata">
            <summary> Stores data used to serialize/deserialize a field. </summary>
        </member>
        <member name="P:Icepack.FieldMetadata.FieldInfo">
            <summary> Reflection data for the field. </summary>
        </member>
        <member name="P:Icepack.FieldMetadata.Getter">
            <summary> Delegate that gets the value of this field for a given object. </summary>
        </member>
        <member name="P:Icepack.FieldMetadata.Setter">
            <summary> Delegate that sets the value of this field for a given object. The parameters are (object, value). </summary>
        </member>
        <member name="P:Icepack.FieldMetadata.Deserialize">
            <summary> Delegate that deserializes the field for a given object. </summary>
        </member>
        <member name="P:Icepack.FieldMetadata.Serialize">
            <summary> Delegate that serializes the field for a given object. </summary>
        </member>
        <member name="P:Icepack.FieldMetadata.Size">
            <summary> The size of the field in bytes. </summary>
        </member>
        <member name="M:Icepack.FieldMetadata.#ctor(System.Int32,Icepack.FieldMetadata)">
            <summary> Called during deserialization. Creates new field metadata. </summary>
            <param name="size"> The size of the field in bytes. </param>
            <param name="registeredFieldMetadata"> The corresponding registered metadata for the field. </param>
        </member>
        <member name="M:Icepack.FieldMetadata.#ctor(System.Reflection.FieldInfo,Icepack.TypeRegistry)">
            <summary> Called during type registration. Creates new field metadata. </summary>
            <param name="fieldInfo"> The <see cref="P:Icepack.FieldMetadata.FieldInfo"/> for the field. </param>
            <param name="typeRegistry"> The serializer's type registry. </param>
        </member>
        <member name="M:Icepack.FieldMetadata.BuildGetter(System.Reflection.FieldInfo)">
            <summary> Builds the delegate used to get the value of the field. </summary>
            <param name="fieldInfo"> The <see cref="P:Icepack.FieldMetadata.FieldInfo"/> for the field. </param>
            <returns> The delegate. </returns>
        </member>
        <member name="M:Icepack.FieldMetadata.BuildSetter(System.Reflection.FieldInfo)">
            <summary> Builds the delegate used to set the value of the field. </summary>
            <param name="fieldInfo"> The <see cref="P:Icepack.FieldMetadata.FieldInfo"/> for the field. </param>
            <returns> The delegate. </returns>
        </member>
        <member name="T:Icepack.FieldSizeFactory">
            <summary> Provides the size of a field of a given type. </summary>
        </member>
        <member name="M:Icepack.FieldSizeFactory.GetFieldSize(System.Type,Icepack.TypeRegistry)">
            <summary> Gets the size of a field of a given type. </summary>
            <param name="type"> The field's declaring type. </param>
            <param name="typeRegistry"> The serializer's type registry. </param>
            <returns> The size of the field in bytes. </returns>
        </member>
        <member name="M:Icepack.FieldSizeFactory.GetStructFieldSize(System.Type,Icepack.TypeRegistry)">
            <summary> Gets the size of a struct field. </summary>
            <param name="type"> The field's declaring type. </param>
            <param name="typeRegistry"> The serializer's type registry. </param>
            <returns> The size of the field in bytes. </returns>
        </member>
        <member name="M:Icepack.FieldSizeFactory.GetEnumFieldSize(System.Type)">
            <summary> Gets the size of an enum field. </summary>
            <param name="type"> The field's declaring type. </param>
            <returns> The size of the field in bytes. </returns>
        </member>
        <member name="T:Icepack.ObjectMetadata">
            <summary> Contains metadata for an object. </summary>
        </member>
        <member name="P:Icepack.ObjectMetadata.Id">
            <summary> A unique ID corresponding to an object. </summary>
        </member>
        <member name="P:Icepack.ObjectMetadata.Type">
            <summary> Metadata about the type of the object. </summary>
        </member>
        <member name="P:Icepack.ObjectMetadata.Length">
            <summary> If the object is an array, list, hashset, or dictionary, this is the number of items. </summary>
        </member>
        <member name="P:Icepack.ObjectMetadata.Value">
            <summary> The value of the object. </summary>
        </member>
        <member name="M:Icepack.ObjectMetadata.#ctor(System.UInt32,Icepack.TypeMetadata,System.Int32,System.Object)">
            <summary> Creates new object metadata. </summary>
            <param name="id"> A unique ID corresponding to an object. </param>
            <param name="type"> Metadata about the type of the object. </param>
            <param name="length"> If the object is an array, list, hashset, or dictionary, this is the length of the object. </param>
            <param name="value"> The value of the object. </param>
        </member>
        <member name="T:Icepack.SerializationContext">
            <summary> Contains state information for the current serialization process. </summary>
        </member>
        <member name="P:Icepack.SerializationContext.Types">
            <summary> Maps a type to metadata about the type. </summary>
        </member>
        <member name="P:Icepack.SerializationContext.TypesInOrder">
            <summary> A list of type metadata in order of ID. </summary>
        </member>
        <member name="P:Icepack.SerializationContext.Objects">
            <summary> Maps an object to metadata about the object. </summary>
        </member>
        <member name="P:Icepack.SerializationContext.ObjectsInOrder">
            <summary> A list of object metadata in order of ID. </summary>
        </member>
        <member name="F:Icepack.SerializationContext.largestObjectId">
            <summary> Keeps track of the largest assigned object ID. </summary>
        </member>
        <member name="F:Icepack.SerializationContext.largestTypeId">
            <summary> Keeps track of the largest assigned type ID. </summary>
        </member>
        <member name="F:Icepack.SerializationContext.typeRegistry">
            <summary> The serializer's type registry. </summary>
        </member>
        <member name="M:Icepack.SerializationContext.#ctor(Icepack.TypeRegistry)">
            <summary> Creates a new serialization context. </summary>
            <param name="typeRegistry"> The serializer's type registry. </param>
        </member>
        <member name="M:Icepack.SerializationContext.RegisterObject(System.Object)">
            <summary> Registers an object for serialization. </summary>
            <param name="obj"> The object. </param>
            <returns> A unique ID for the object. </returns>
        </member>
        <member name="M:Icepack.SerializationContext.GetTypeMetadata(System.Type)">
            <summary>
            Retrieves the metadata for a type, lazy-registers types that have the <see cref="T:Icepack.SerializableObjectAttribute"/> attribute.
            </summary>
            <param name="type"> The type to retrieve metadata for. </param>
            <returns> The metadata for the type. </returns>
        </member>
        <member name="T:Icepack.SerializationDelegateFactory">
            <summary> Returns delegates for serializing types and fields. </summary>
        </member>
        <member name="M:Icepack.SerializationDelegateFactory.SerializeStruct(System.Object,Icepack.SerializationContext,System.IO.BinaryWriter)">
            <summary> Serializes a struct field. </summary>
        </member>
        <member name="M:Icepack.SerializationDelegateFactory.GetReferenceTypeOperation(Icepack.TypeCategory)">
            <summary> Returns a delegate which is used to serialize instances of the given type category. </summary>
            <param name="category"> The type category. </param>
            <returns> The serialization delegate. </returns>
        </member>
        <member name="M:Icepack.SerializationDelegateFactory.GetFieldOperation(System.Type)">
            <summary> Returns the delegate used to serialize fields of the given type. </summary>
            <param name="type"> The field's declaring type. </param>
            <returns> The serialization delegate. </returns>
        </member>
        <member name="M:Icepack.SerializationDelegateFactory.GetImmutableOperation(System.Type)">
            <summary> Returns the delegate used to serialize immutable types. </summary>
            <param name="type"> The type. </param>
            <returns> The serialization delegate. </returns>
        </member>
        <member name="T:Icepack.TypeCategory">
            <summary> Categories for types, which determine how the serializer handles objects of that type. </summary>
        </member>
        <member name="F:Icepack.TypeCategory.Immutable">
            <summary> A primitive, string, or decimal. </summary>
        </member>
        <member name="F:Icepack.TypeCategory.Array">
            <summary> An array. </summary>
        </member>
        <member name="F:Icepack.TypeCategory.List">
            <summary> A list. </summary>
        </member>
        <member name="F:Icepack.TypeCategory.HashSet">
            <summary> A hashset. </summary>
        </member>
        <member name="F:Icepack.TypeCategory.Dictionary">
            <summary> A dictionary. </summary>
        </member>
        <member name="F:Icepack.TypeCategory.Struct">
            <summary> A value type that is not a primitive, decimal, or enum. </summary>
        </member>
        <member name="F:Icepack.TypeCategory.Class">
            <summary> A class that is not an array, list, hashset, or dictionary, string, or type. </summary>
        </member>
        <member name="F:Icepack.TypeCategory.Enum">
            <summary> An enum. </summary>
        </member>
        <member name="F:Icepack.TypeCategory.Type">
            <summary> A type. </summary>
        </member>
        <member name="T:Icepack.TypeMetadata">
            <summary> Contains information necessary to serialize/deserialize a type. </summary>
        </member>
        <member name="P:Icepack.TypeMetadata.Id">
            <summary> A unique ID for the type. This is not assigned during registration. </summary>
        </member>
        <member name="P:Icepack.TypeMetadata.Type">
            <summary> The type. </summary>
        </member>
        <member name="P:Icepack.TypeMetadata.EnumUnderlyingTypeMetadata">
            <summary> Only used for enum types. This is metadata for the underlying type. </summary>
        </member>
        <member name="P:Icepack.TypeMetadata.Fields">
            <summary> Only used for non-immutable and regular struct and class types. Metadata for each serializable field. </summary>
        </member>
        <member name="P:Icepack.TypeMetadata.FieldsByName">
            <summary> Maps a field name to metadata about that field. </summary>
        </member>
        <member name="P:Icepack.TypeMetadata.FieldsByPreviousName">
            <summary> Maps a field's previous name (specified by <see cref="T:Icepack.PreviousNameAttribute"/>) to metadata about that field. </summary>
        </member>
        <member name="P:Icepack.TypeMetadata.Parent">
            <summary> Only used for regular class types. This indicates whether the class has a base class that is not <see cref="T:System.Object"/>. </summary>
        </member>
        <member name="P:Icepack.TypeMetadata.HashSetAdder">
            <summary> Only used for hashset types. A delegate that adds an item to a hash set without having to cast it to the right type. </summary>
        </member>
        <member name="P:Icepack.TypeMetadata.SerializeKey">
            <summary> Only used for dictionary types. A delegate that serializes the key for a dictionary entry. </summary>
        </member>
        <member name="P:Icepack.TypeMetadata.SerializeItem">
            <summary>
            Used for array, list, hashset, and dictionary types. A delegate that serializes an item (or an entry value for a dictionary).
            </summary>
        </member>
        <member name="P:Icepack.TypeMetadata.SerializeImmutable">
            <summary> Used for immutable types. Serializes the object. </summary>
        </member>
        <member name="P:Icepack.TypeMetadata.SerializeReferenceType">
            <summary> A delegate used to serialize a reference type object, or a boxed value type object. </summary>
        </member>
        <member name="P:Icepack.TypeMetadata.DeserializeKey">
            <summary> Only used for dictionary types. A delegate that deserializes the key for a dictionary entry. </summary>
        </member>
        <member name="P:Icepack.TypeMetadata.DeserializeItem">
            <summary>
            Used for array, list, hashset, and dictionary types. A delegate that deserializes an item (or an entry value for a dictionary).
            </summary>
        </member>
        <member name="P:Icepack.TypeMetadata.DeserializeImmutable">
            <summary> Used for immutable types. Deserializes the object. </summary>
        </member>
        <member name="P:Icepack.TypeMetadata.DeserializeReferenceType">
            <summary> A delegate used to deserialize a reference type object, or a boxed value type object. </summary>
        </member>
        <member name="P:Icepack.TypeMetadata.Category">
            <summary> The category for the type. Determines serialization/deserialization behaviour for a type. </summary>
        </member>
        <member name="P:Icepack.TypeMetadata.ItemSize">
            <summary>
            Used for array, list, hashset, and dictionary types. The size of an item (or an entry value for a dictionary) in bytes.
            </summary>
        </member>
        <member name="P:Icepack.TypeMetadata.KeySize">
            <summary> Only used for dictionary types. The size of an entry key in bytes. </summary>
        </member>
        <member name="P:Icepack.TypeMetadata.InstanceSize">
            <summary>
            Only used for regular struct and class types. The size of an instance of the type in bytes, calculated by summing the sizes
            of each of the fields.
            </summary>
        </member>
        <member name="M:Icepack.TypeMetadata.#ctor(Icepack.TypeMetadata,System.UInt32,Icepack.TypeMetadata,Icepack.TypeMetadata)">
            <summary> Called during serialization. Creates new type metadata. </summary>
            <param name="registeredTypeMetadata"> The metadata for the type retrieved from the type registry. </param>
            <param name="id"> A unique ID for the type. </param>
            <param name="enumUnderlyingTypeMetadata"> For an enum type, this is the metadata for the underlying type. Otherwise null. </param>
        </member>
        <member name="M:Icepack.TypeMetadata.#ctor(Icepack.TypeMetadata,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.Int32},System.UInt32,Icepack.TypeMetadata,Icepack.TypeCategory,System.Int32,System.Int32,System.Int32,Icepack.TypeMetadata)">
            <summary>
            Called during deserialization. Copies relevant information from the registered type metadata and filters the fields based on
            what is provided by the serialized data.
            </summary>
            <param name="registeredTypeMetadata"> The metadata for the type retrieved from the type registry. </param>
            <param name="fieldNames"> A list of names of serialized fields. </param>
            <param name="fieldSizes"> A list of sizes, in bytes, of serialized fields. </param>
            <param name="id"> A unique ID for the type. </param>
            <param name="category">
            The category for the type. This is necessary because the registered type may be missing, and the serializer needs
            to know how to skip instances of the missing type.
            </param>
            <param name="itemSize"> For array, list, hashset, and dictionary types. The size of an item in bytes. </param>
            <param name="keySize"> For dictionary types. The size of a key in bytes. </param>
            <param name="enumUnderlyingTypeMetadata"> For enum types. Metadata for the underlying type. </param>
        </member>
        <member name="M:Icepack.TypeMetadata.#ctor(System.Type,Icepack.TypeRegistry)">
            <summary> Called during type registration. </summary>
            <param name="type"> The type. </param>
            <param name="typeRegistry"> The serializer's type registry. </param>
        </member>
        <member name="M:Icepack.TypeMetadata.GetCategory(System.Type)">
            <summary> Determines the category for a given type. </summary>
            <param name="type"> The type. </param>
            <returns> The category for the type. </returns>
        </member>
        <member name="M:Icepack.TypeMetadata.PopulateFields(Icepack.TypeRegistry)">
            <summary> Used for regular struct and class types. Builds the metadata for the fields. </summary>
            <param name="typeRegistry"> The serializer's type registry. </param>
        </member>
        <member name="M:Icepack.TypeMetadata.PopulateSize">
            <summary> Used for regular struct and class types. Populates the instance size for the type. </summary>
        </member>
        <member name="M:Icepack.TypeMetadata.BuildHashSetAdder">
            <summary> Builds the delegate used to add items to a hashset. </summary>
            <returns> The delegate. </returns>
        </member>
        <member name="T:Icepack.TypeRegistry">
            <summary> Maintains a collection of type metadata used for serialization/deserialization operations. </summary>
        </member>
        <member name="F:Icepack.TypeRegistry.types">
            <summary> Maps a type to metadata about the type. </summary>
        </member>
        <member name="M:Icepack.TypeRegistry.#ctor">
            <summary> Creates a new type registry. </summary>
        </member>
        <member name="M:Icepack.TypeRegistry.RegisterType(System.Type)">
            <summary> Registers a type as serializable. </summary>
            <param name="type"> The type to register. </param>
            <remarks> This is used to allow types in other assemblies to be serialized, or for arrays and concrete generic classes. </remarks>
        </member>
        <member name="M:Icepack.TypeRegistry.GetTypeMetadata(System.Type)">
            <summary>
            Called during type registration and serialization. Retrieves the metadata for a type and
            lazy-registers types that have the <see cref="T:Icepack.SerializableObjectAttribute"/> attribute.
            </summary>
            <param name="type"> The type to retrieve metadata for. </param>
            <returns> The metadata for the type. </returns>
        </member>
        <member name="M:Icepack.TypeRegistry.GetTypeMetadata(System.String)">
            <summary>
            Called during deserialization to match a type name to a registered type. It lazy-registers types that
            have the <see cref="T:Icepack.SerializableObjectAttribute"/> attribute.
            </summary>
            <param name="name"> The assembly qualified name of the type. </param>
            <returns> Metadata for the specified type. </returns>
        </member>
        <member name="T:Icepack.ISerializerListener">
            <summary>
            Defines an interface for an object that performs logic before serialization, and after deserialization.
            Typically this would be used to update a serializable field with a more efficient representation of the
            object's state.
            </summary>
        </member>
        <member name="M:Icepack.ISerializerListener.OnBeforeSerialize">
            <summary> Called before the object is serialized. </summary>
        </member>
        <member name="M:Icepack.ISerializerListener.OnAfterDeserialize">
            <summary> Called after the object is deserialized. </summary>
        </member>
        <member name="T:Icepack.PreviousNameAttribute">
            <summary> Allows the serializer to match a serialized field with the corresponding renamed one. </summary>
        </member>
        <member name="P:Icepack.PreviousNameAttribute.Name">
            <summary> The previous name of the field. </summary>
        </member>
        <member name="M:Icepack.PreviousNameAttribute.#ctor(System.String)">
            <summary> Creates a new <see cref="T:Icepack.PreviousNameAttribute"/>. </summary>
            <param name="name"> The previous name of the field. </param>
        </member>
        <member name="T:Icepack.SerializableObjectAttribute">
            <summary> Allows a class or struct to be serialized/deserialized. </summary>
        </member>
        <member name="T:Icepack.Serializer">
            <summary> Serializes/deserializes objects. </summary>
        </member>
        <member name="F:Icepack.Serializer.CompatibilityVersion">
            <summary> Serializers with the same compatibility version are guaranteed to be interoperable. </summary>
        </member>
        <member name="M:Icepack.Serializer.#ctor">
            <summary> Creates a new serializer. </summary>
        </member>
        <member name="M:Icepack.Serializer.RegisterType(System.Type)">
            <summary> Registers a type as serializable. </summary>
            <param name="type"> The type to register. </param>
        </member>
        <member name="M:Icepack.Serializer.Serialize(System.Object,System.IO.Stream)">
            <summary> Serializes an object graph to a stream. </summary>
            <param name="rootObj"> The root object to be serialized. </param>
            <param name="outputStream"> The stream to output the serialized data to. </param>
        </member>
        <member name="M:Icepack.Serializer.SerializeObjectMetadata(Icepack.SerializationContext,System.IO.BinaryWriter)">
            <summary> Serializes the object metadata. </summary>
            <param name="context"> The current serialization context. </param>
            <param name="writer"> Writes the metadata to a stream. </param>
        </member>
        <member name="M:Icepack.Serializer.SerializeTypeMetadata(Icepack.SerializationContext,System.IO.BinaryWriter)">
            <summary> Serializes the type metadata. </summary>
            <param name="context"> The current serialization context. </param>
            <param name="writer"> Writes the metadata to a stream. </param>
        </member>
        <member name="M:Icepack.Serializer.Deserialize``1(System.IO.Stream)">
            <summary> Deserializes a data stream as an object of the specified type. </summary>
            <typeparam name="T"> The type of the object being deserialized. </typeparam>
            <param name="inputStream"> The stream containing the data to deserialize. </param>
            <returns> The deserialized object. </returns>
        </member>
        <member name="M:Icepack.Serializer.DeserializeObjectMetadata(Icepack.DeserializationContext,System.IO.BinaryReader)">
            <summary> Deserializes the object metadata. </summary>
            <param name="context"> The current deserialization context. </param>
            <param name="reader"> Reads the metadata from the stream. </param>
        </member>
        <member name="M:Icepack.Serializer.DeserializeTypeMetadata(Icepack.DeserializationContext,System.IO.BinaryReader)">
            <summary> Deserializes the type metadata. </summary>
            <param name="context"> The current deserialization context. </param>
            <param name="reader"> Reads the metadata from the stream. </param>
        </member>
    </members>
</doc>
